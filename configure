#!/usr/bin/perl -w

#
# Copyright (c) 2012, The Cubebox Team <http://cubebox.bplaced.net/>
#
#
# This file is part of cubebox.
#
# cubebox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cubebox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cubebox.  If not, see <http://www.gnu.org/licenses/>.
#


use strict;
use Cwd;
use File::Path;


my $build_dir="./build";
my $prefix="/usr/games/cubebox";
my $flag_update=0;


sub help {
	print <<EOF;
===============================================================

Usage:
	./configure 
				Generate Makefile
	--build-dir dir		Default ./build
	--prefix dir		Default /usr/games/cubebox
	--help			Shows this help
	--update		Runs sync-all -r -a latest
	--only-client		Makefile for client only
	--only-server		Makefile for server only
	--only-shared		Makefile for shared only
		
	
===============================================================


EOF
	
}

sub main {

	my $pwd = getcwd();
    my @args=@_;
    my $all="";

    while ($#args ne -1) {
        my $arg = shift @args;
        
        if ($arg eq "--help") {
            help(0);
            return 0;
        } elsif($arg eq "--build-dir"){
			$build_dir = shift @args;
        } elsif($arg eq "--prefix"){
			$prefix = shift @args;
        } elsif($arg eq "--update"){
			$flag_update = 1;
        } elsif($arg eq "--only-client"){
			$all.="client ";
        } elsif($arg eq "--only-server"){
			$all.="server ";
        } elsif($arg eq "--only-shared"){
			$all.="shared ";
		} else {
			print "Unknonw argument $arg\n";
			return;
		}
    }
    
    if($flag_update){
		system "./sync-all -r -a latest";
		return 0;
	}

	if($all eq ""){
		$all="shared client server";
	}
	
	
	my $cflags;
	
	my $cwd=getcwd();
	
	my $libs="";
	my $shared="";
	my $client="";
	my $server="";
	my $cc="";
	my $default_flags="-g -o ";
	my $linker_flags="-g -o ";
	my $find="find";
	my $ld="gcc";
	my $ldflags="";
	my $file_ending="";
	my $additional_files="";

	chdir $cwd;

	if((($^O =~/win/i) && !($^O =~/darwin/i)&& !($^O =~/cygwin/i))|| ($^O =~/msys/i)){
		
		$cflags="/TC /DWIN /Y- /nologo /MT ";

		$libs=`unixfind . -name "*.c"|grep "shared/libs/"`;
		$shared=`unixfind . -name "*.c" | grep "shared/" |grep -v "/libs/"`;
		$client=`unixfind . -name "*.c" | grep "client/"`;
		$server=`unixfind . -name "*.c" | grep "server/"`;

		$libs=~s/[.]c/.obj/g;
		$client=~s/[.]c/\.obj/g;
		$shared=~s/[.]c/\.obj/g;
		$server=~s/[.]c/\.obj/g;

		$libs=~s/\//\\/g;
		$client=~s/\//\\/g;
		$shared=~s/\//\\/g;
		$server=~s/\//\\/g;
		
		$default_flags="/c /I.\\shared\\libs\\extern\\include /Fo";
		$linker_flags="/nologo /out:";
		$ldflags="/LIBPATH:.\\shared\\libs\\extern\\lib glut32.lib pthreadVC2.lib";
		$file_ending=".exe";
		
		$cc="cl ";
		$ld="link";
		$find="unixfind ";
		$additional_files="\${CP} ./shared/libs/extern/lib/glut32.dll \${BUILD_DIR}/ -rf\n\t";
		$additional_files.="\${CP} ./shared/libs/extern/lib/pthreadVC2.dll \${BUILD_DIR}/ -rf";
		
	} else {
		$cflags=" -lGL -lGLU -lglut -Wall -lportaudio -lm -lpthread -lrt -DSHM -lXext -DLINUX";

		$libs=`find . -name "*.c"|grep "shared/libs/"`;
		$shared=`find . -name "*.c" | grep "shared/" |grep -v "/libs/"`;
		$client=`find . -name "*.c" | grep "client/"`;
		$server=`find . -name "*.c" | grep "server/"`;

		$libs=~s/[.]c/.o/g;
		$client=~s/[.]c/\.o/g;
		$shared=~s/[.]c/\.o/g;
		$server=~s/[.]c/\.o/g;
		
		$cc="gcc ";
		$ldflags=$cflags;
	}

	$libs=~s/\n/ /g;
	$client=~s/\n/ /g;
	$shared=~s/\n/ /g;
	$server=~s/\n/ /g;
	$cflags=~s/\n/ /g;

    my $makefile="
INSTALL_PATH=$prefix
BIN_DIR = /usr/bin/
BUILD_DIR = $build_dir

CC = $cc
LD = $ld
CP = cp
LN = ln
CHMOD = chmod
MKDIR = mkdir

CFLAGS=$cflags
LDFLAGS=$ldflags

all: init $all

init:
	\${MKDIR} \${BUILD_DIR} -p
	\${CP} ./shared/etc/ \${BUILD_DIR}/ -rf
	\${CP} ./shared/media/ \${BUILD_DIR}/ -rf
	$additional_files
	
client: libs $client
	\$(LD) $linker_flags\${BUILD_DIR}/cb_cli$file_ending $libs $client  \$(LDFLAGS)

server: libs $server
	\$(LD) $linker_flags\${BUILD_DIR}/cb_ser$file_ending $libs $server  \$(LDLAGS)

shared: libs $shared
	\$(LD) $linker_flags\${BUILD_DIR}/cb_utils$file_ending $libs $shared  \$(LDFLAGS)

libs: $libs

%.o:%.c
	\$(CC) $default_flags \$@ -c \$< \$(CFLAGS)

%.obj:%.c
	\$(CC) $default_flags\$@ \$(CFLAGS) \$<

rebuild:
	superclean
	all

clean:
	$find ./ -name \"*.o\" -exec rm -rf {} \\;

superclean: clean
	rm -rf \${BUILD_DIR}
	
new: superclean all

docs:
	robodoc --src ./ --doc shared/documentation --multidoc --html --index --sections --sectionnameonly --cmode --source_line_numbers --rc robodoc.rc

";  
	open(MAKEFILE, ">Makefile");
	print MAKEFILE $makefile;
	close(MAKEFILE);
    print "You can now run make\n";
}

main(@ARGV);

 
